Well-performing queries (< 300ms):
master of software engineering
a test query
this will not return any results
e
hello
quick
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

Poorly-performing queries:
a (529ms)
the (616ms)
1 (555ms)
to be or not to be (588ms)
$$$$$$$$$$$$$$$$$$$$$$$$$ (4094ms)
mmmmmmmmmmmmmmmmm (1638ms)
uci (300ms)
ics (401ms)
u (350ms)
a e i o u (526ms)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa (8873ms)
Iftekhar Ahmed (375ms)
nonexistentterm (1292ms)

How we improved our query times?

We found some major inefficiencies in our code between M2 and M3:
1. Optimized index retrieval by partitioning the index into token-range partitions.
2. Optimized querying by employing short-circuiting heuristics before applying heavier computation (i.e. pruning non-contestants by if-idf score before doing cosine similarity)
3. Lemmatized both the index and query for more efficient query expansion (rather than adding synonyms)
4. Disabled our spellchecker. We initially had a spellchecker, but it performed quite inefficiently on "very poorly spelled" words.
5. Converted query tokens to a set, as to not repeatedly fetch postings for the same token.
